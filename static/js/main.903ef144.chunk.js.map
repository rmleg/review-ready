{"version":3,"sources":["components/review-ready-logo.png","components/FileUpload.js","components/Header.js","components/Footer.js","components/DataRow.js","components/Data.js","components/BackButton.js","components/SelectColumns.js","components/Choices.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","FileUpload","props","className","onSubmit","onClickHandler","htmlFor","error","type","id","Button","color","Header","src","logo","alt","scale","Footer","year","Date","getFullYear","DataRow","key","onClick","clickColumnHandler","header","data","Data","dataArray","headers","length","i","obj","push","map","index","Object","keys","BackButton","handleBackClick","SelectColumns","name","clickExportHandler","clickSelectAllHandler","selectAll","scope","Choices","onDocsClick","firstCandidateData","App","createDoc","applicant","doc","Document","console","log","docContents","forEach","item","newContents","Paragraph","children","TextRun","text","state","bold","spacing","after","addSection","properties","Packer","toBlob","then","blob","saveAs","setState","loaded","uploadedFile","checkAll","inputs","document","querySelectorAll","checked","newSet","Set","selectedColumns","has","delete","add","downloadFile","filename","file","element","createElement","setAttribute","encodeURIComponent","style","display","body","appendChild","click","removeChild","sorter","a","b","updateJSON","sortedSelectors","Array","from","sort","allEditedData","innerArray","newArr","newCSV","Papa","unparse","newName","changeSelectedTitles","titles","selectedTitles","dataHandler","event","preventDefault","csvToJSON","getElementById","files","config","complete","results","userData","parse","choicesClick","choice","choiceMade","returnSet","clear","unCheckAll","this","fileUploadHandler","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.903ef144.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/review-ready-logo.17e0464f.png\";","import React from \"react\";\nimport { Button } from \"reactstrap\";\n\nconst FileUpload = props => {\n  return (\n    <div className=\"row p-5\">\n      <div className=\"col-md-6 col-12\">\n        <h1>Welcome to Review Ready</h1>\n        <p className=\"h3\">Upload a CSV to Begin</p>\n      </div>\n\n      <div className=\"col-md-6 col-12\">\n        <form onSubmit={props.onClickHandler}>\n          <div className=\"form-group mt-3\">\n            <label htmlFor=\"input\" className=\"sr-only\">\n              Upload CSV\n            </label>\n            {props.error ? (\n              <div>\n                <span className=\"alert-danger\">\n                  Please upload a valid CSV file.\n                </span>\n              </div>\n            ) : null}\n            <input type=\"file\" id=\"input\" className=\"form-control-file\" />\n            <Button className=\"mt-3\" color=\"info\" type=\"submit\">\n              Upload\n            </Button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default FileUpload;\n","import React from \"react\";\nimport logo from \"./review-ready-logo.png\";\n\nconst Header = () => {\n  return (\n    <div id=\"wrapper-navbar\">\n      <div\n        id=\"site-branding\"\n        className=\"row align-items-center bg-primary px-5\"\n      >\n        <div id=\"site-logo\" className=\"col-md-4 pt-3 pb-4\">\n          <img src={logo} className=\"img-fluid\" alt=\"Review Ready\" scale=\"0\" />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\n\nconst Footer = () => {\n  const today = new Date();\n  const year = today.getFullYear();\n  return (\n    <footer className=\"row p-5\">\n      <p>Â© {year} The Regents of the University of Michigan</p>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React from \"react\";\n\nconst DataRow = props => {\n  return (\n    <tr>\n      <td key={`header-${props.id}`}>\n        <input\n          type=\"checkbox\"\n          className=\"selector-checkbox\"\n          id={`header-${props.id}`}\n          onClick={() => props.clickColumnHandler(props.id)}\n        />{\" \"}\n        <label htmlFor={`header-${props.id}`}>{props.header}</label>\n      </td>\n      <td key={`sample-${props.id}`}>{props.data}</td>\n    </tr>\n  );\n};\n\nexport default DataRow;\n","import React from \"react\";\nimport DataRow from \"./DataRow\";\n\nconst Data = props => {\n  let dataArray = [];\n  if (props.headers.length === props.data.length) {\n    for (let i = 0; i < props.headers.length; i++) {\n      let obj = {};\n      obj[props.headers[i]] = props.data[i];\n      dataArray.push(obj);\n    }\n  }\n\n  let returnData = dataArray.map((obj, index) => {\n    let key = Object.keys(obj)[0];\n    return (\n      <DataRow\n        header={key}\n        data={obj[key]}\n        id={index}\n        clickColumnHandler={props.clickColumnHandler}\n      />\n    );\n  });\n  return returnData;\n};\n\nexport default Data;\n","import React from \"react\";\nimport { Button } from \"reactstrap\";\n\nconst BackButton = props => {\n  return (\n    <div className=\"mb-3 col-12 ml-n3\">\n      <Button color=\"info\" onClick={props.handleBackClick}>\n        &larr; Upload a Different File\n      </Button>\n    </div>\n  );\n};\n\nexport default BackButton;\n","import React from \"react\";\nimport Data from \"./Data\";\nimport BackButton from \"./BackButton\";\nimport { Button } from \"reactstrap\";\n\nconst SelectColumns = props => {\n  /* let output = props.data.map(title => {\n    return <li>{title}</li>;\n  }); */\n  /* let headers = props.headers.map((value, index) => (\n    <td data-key={index} key={`header-${index}`}>\n      {value}\n    </td>\n  ));\n\n  let sampleData = props.data.map((value, index) => (\n    <td data-key={index} key={`sample-${index}`}>\n      {value}\n    </td>\n  )); */\n\n  return (\n    <>\n      <BackButton handleBackClick={props.handleBackClick} />\n      <h3 className=\"mb-3 col-md-12\">\n        Select columns from '{props.name}' to include in export\n      </h3>\n      <div className=\"mb-3 ml-3 download\">\n        <Button color=\"info\" onClick={props.clickExportHandler}>\n          &darr; Download CSV with selections\n        </Button>\n      </div>\n\n      <div className=\"col-md-12 mb-3\"><Button color=\"info\" onClick={props.clickSelectAllHandler}>\n        {props.selectAll ? \"Unselect All\" : \"Select All\"}\n      </Button></div>\n\n      <table className=\"table table-striped\">\n        <thead>\n          <tr>\n            <th scope=\"col\">Column</th>\n            <th scope=\"col\">First Row of Data</th>\n          </tr>\n        </thead>\n        <tbody>\n          <Data\n            headers={props.headers}\n            data={props.data}\n            clickColumnHandler={props.clickColumnHandler}\n          />\n        </tbody>\n      </table>\n    </>\n  );\n};\n\nexport default SelectColumns;\n","import React from \"react\";\nimport { Button } from \"reactstrap\";\n\nconst Choices = props => {\n  return (\n    <div className=\"col-md-6 mx-auto text-center\">\n      <Button\n        className=\"m-3\"\n        color=\"info\"\n        onClick={() => props.onClick(\"columns\")}\n      >\n        Edit Columns\n      </Button>\n      <Button\n        className=\"m-3\"\n        onClick={() => props.onDocsClick(props.firstCandidateData)}\n      >\n        Download Candidate Documents (with all columns)\n      </Button>\n    </div>\n  );\n};\n\nexport default Choices;\n","import React from \"react\";\nimport FileUpload from \"./components/FileUpload\";\nimport \"./App.scss\";\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport Papa from \"papaparse\";\nimport SelectColumns from \"./components/SelectColumns\";\nimport { Document, Packer, Paragraph, TextRun } from \"docx\";\nimport { saveAs } from \"file-saver\";\nimport Choices from \"./components/Choices\";\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectAll: false,\n      selectedTitles: false,\n      data: false,\n      headers: false,\n      loaded: false,\n      uploadedFile: false,\n      error: false,\n      selectedColumns: new Set(),\n      choiceMade: false\n    };\n  }\n\n  createDoc = applicant => {\n    // Create document\n    const doc = new Document();\n    console.log(applicant);\n    let docContents = [];\n    // Documents contain sections, you can have multiple sections per document, go here to learn more about sections\n    // This simple example will only contain one section\n    applicant.forEach((item, index) => {\n      console.log(`adding for ${item} at ${index}`);\n      let newContents = new Paragraph({\n        children: [\n          new TextRun({\n            text: `${this.state.headers[index]}`,\n            bold: true\n          })\n        ]\n      });\n      docContents.push(newContents);\n      newContents = new Paragraph({\n        children: [\n          new TextRun({\n            text: `${item}`\n          })\n        ],\n        spacing: {\n          after: 240\n        }\n      });\n      docContents.push(newContents);\n    });\n    doc.addSection({\n      properties: {},\n      children: docContents\n    });\n    Packer.toBlob(doc).then(blob => {\n      console.log(blob);\n      saveAs(blob, \"example.docx\");\n      console.log(\"Document created successfully\");\n    });\n  };\n\n  handleBackClick = () => {\n    console.log(\"clicked\");\n    this.setState({\n      loaded: false,\n      uploadedFile: false\n    });\n  };\n\n  checkAll = () => {\n    const inputs = document.querySelectorAll('.selector-checkbox');\n    for (let index = 0; index < inputs.length; index++) {\n      inputs[index].checked = true;\n    }\n  }\n\n  clickColumnHandler = id => {\n    let newSet = new Set(this.state.selectedColumns);\n    if (newSet.has(id)) {\n      newSet.delete(id);\n    } else {\n      newSet.add(id);\n    }\n    this.setState({\n      selectedColumns: newSet\n    });\n    /* console.log(newSet);\n    console.log(this.state.selectedColumns);\n    console.log(id); */\n  };\n\n  downloadFile = (filename, file) => {\n    let element = document.createElement(\"a\");\n    element.setAttribute(\n      \"href\",\n      \"data:text/plain;charset=utf-8,\" + encodeURIComponent(file)\n    );\n    element.setAttribute(\"download\", filename);\n\n    element.style.display = \"none\";\n    document.body.appendChild(element);\n\n    element.click();\n\n    document.body.removeChild(element);\n  };\n\n  sorter = (a, b) => {\n    if (a < b) return -1; // any negative number works\n    if (a > b) return 1; // any positive number works\n    return 0; // equal values MUST yield zero\n  };\n\n  updateJSON = () => {\n    //sort column keys to maintain order of imported data\n    const sortedSelectors = Array.from(this.state.selectedColumns).sort(\n      this.sorter\n    );\n    console.log(sortedSelectors);\n    //initialize empty array to hold results\n    let allEditedData = [];\n    //Loop through all file data\n    //For each item in the array of arrays, loop through that array\n    this.state.data.forEach(innerArray => {\n      //initialize empty array to hold edited data\n      let newArr = [];\n      for (let i = 0; i < sortedSelectors.length; i++) {\n        //get thing at each sortedSelectors[i] and add it to newArr\n        let index = sortedSelectors[i];\n        newArr.push(innerArray[index]);\n      }\n      //add newArr to edited data\n      allEditedData.push(newArr);\n    });\n    const newCSV = Papa.unparse(allEditedData);\n    const newName = `Review_Ready_${this.state.uploadedFile.name}`;\n    this.downloadFile(newName, newCSV);\n  };\n\n  changeSelectedTitles = titles => {\n    this.setState({\n      selectedTitles: titles\n    });\n  };\n\n  dataHandler = event => {\n    event.preventDefault();\n    this.onClickHandler().then(file => {\n      if (file && file.type === \"text/csv\") {\n        this.setState({\n          uploadedFile: file,\n          error: false\n        });\n        this.csvToJSON();\n      } else {\n        this.setState({\n          error: true\n        });\n      }\n    });\n  };\n\n  onClickHandler = async () => {\n    const uploadedFile = document.getElementById(\"input\").files[0];\n    return uploadedFile;\n  };\n\n  csvToJSON = () => {\n    const config = {\n      complete: results => {\n        this.setState({ headers: results.data[0] });\n        let userData = [];\n        results.data.forEach(data => {\n          userData.push(data);\n        });\n        this.setState({ data: userData, loaded: true });\n      },\n      header: false\n    };\n    Papa.parse(this.state.uploadedFile, config);\n  };\n\n  choicesClick = choice => {\n    this.setState({\n      choiceMade: choice\n    });\n  };\n\n  clickSelectAllHandler = () => {\n    const returnSet = new Set();\n    if (this.state.selectAll) {\n      this.setState({\n        selectAll: false\n      })\n      returnSet.clear();\n      this.unCheckAll();\n    } else {\n      for (let index = 0; index < this.state.headers.length; index++) {\n        returnSet.add(index)\n      }\n      this.setState({\n        selectAll: true,\n      })\n\n      this.checkAll();\n    }\n    this.setState({\n      selectedColumns: returnSet\n    })\n  }\n\n  unCheckAll = () => {\n    const inputs = document.querySelectorAll('.selector-checkbox');\n    for (let index = 0; index < inputs.length; index++) {\n      inputs[index].checked = false;\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App container-fluid\">\n        <Header />\n        {this.state.loaded ? (\n          <Choices\n            onClick={this.choicesClick}\n            onDocsClick={this.createDoc}\n            firstCandidateData={this.state.data[1]}\n          />\n        ) : (\n            <FileUpload\n              onClickHandler={this.dataHandler}\n              fileUploadHandler={this.fileUploadHandler}\n              error={this.state.error}\n            />\n          )}\n        <div className=\"row p-5\">\n          {this.state.loaded && this.state.choiceMade === \"columns\" ? (\n            <>\n              <SelectColumns\n                name={this.state.uploadedFile.name}\n                headers={this.state.headers}\n                data={this.state.data[1]}\n                handleBackClick={this.handleBackClick}\n                clickColumnHandler={this.clickColumnHandler}\n                clickExportHandler={this.updateJSON}\n                clickSelectAllHandler={this.clickSelectAllHandler}\n                selectAll={this.state.selectAll}\n              />\n            </>\n          ) : null}\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n//import \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}